
/*
 * Copyright (c) 1990-2007 kopiRight Managed Solutions GmbH
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Id$
 */

// Generated by optgen from AntlrOptions.opt
package com.kopiright.compiler.tools.antlr.compiler;

import gnu.getopt.Getopt;
import gnu.getopt.LongOpt;

public class AntlrOptions extends com.kopiright.util.base.Options {

  public AntlrOptions(String name) {
    super(name);
  }

  public AntlrOptions() {
    this("Antlr");
  }

  public String destination = ".";

  public boolean processOption(int code, Getopt g) {
    switch (code) {
    case 'd':
      destination = getString(g, ""); return true;
    default:
      return super.processOption(code, g);
    }
  }

  public String[] getOptions() {
    String[]	parent = super.getOptions();
    String[]	total = new String[parent.length + 1];
    System.arraycopy(parent, 0, total, 0, parent.length);
    total[parent.length + 0] = "  --destination, -d<String>: Sets the directory where all output is generated [.]";
    
    return total;
  }


  public String getShortOptions() {
    return "d:" + super.getShortOptions();
  }


  public void version() {
    System.out.println();
  }


  public void usage() {
    System.err.println("usage: com.kopiright.compiler.tools.antlr.compiler.Main [option]* [--help] <grammar-files>");
  }

  public LongOpt[] getLongOptions() {
    LongOpt[]	parent = super.getLongOptions();
    LongOpt[]	total = new LongOpt[parent.length + LONGOPTS.length];
    
    System.arraycopy(parent, 0, total, 0, parent.length);
    System.arraycopy(LONGOPTS, 0, total, parent.length, LONGOPTS.length);
    
    return total;
  }

  private static final LongOpt[] LONGOPTS = {
    new LongOpt("destination", LongOpt.REQUIRED_ARGUMENT, null, 'd')
  };
}
