/*
 * Copyright (C) 1990-2001 DMS Decision Management Systems Ges.m.b.H.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Id: Sqlc.flex.in,v 1.7 2003/05/23 06:00:11 laurent Exp $
 */

package at.dms.xkopi.comp.sqlc;

import at.dms.compiler.base.Compiler;
import at.dms.compiler.base.CompilerMessages;
import at.dms.compiler.tools.antlr.extra.CToken;
import at.dms.compiler.tools.antlr.extra.InputBuffer;

%%

%public
%class SqlcScanner
%extends at.dms.compiler.tools.antlr.extra.Scanner
%implements SqlcTokenTypes

%function nextTokenImpl
%type at.dms.compiler.tools.antlr.runtime.Token

%unicode
%pack

%{
  public SqlcScanner(Compiler compiler, InputBuffer buffer) {
    super(compiler, buffer);
    this.buffer = buffer;
  }

  private final StringBuffer	string = new StringBuffer();
%}

%init{
  // dummy: we provide our own constructor
  super(null, null);
%init}

%eofval{
  return TOKEN_EOF;
%eofval}

/*
 * macros
 */
// white space
W =	[ \t\f]

// line terminator
T =	\r|\n|\r\n

// decimal digit
D =	[0-9]

// exponent part
E =	[eE] [+\-]? {D}+


%state STRINGLITERAL, DELIMITERID

%%

<YYINITIAL> {

%%include SqlcFlexRules.txt

  /* string literal */
  \'    			{ yybegin(STRINGLITERAL); string.setLength(0); }

  /* delimited ids */
  \"    			{ yybegin(DELIMITERID); string.setLength(0); }

  /* numeric literals */
  {D}+				{ return new CToken(INTEGER_LIT, yytext()); }

  {D}+ \. {D}* {E}?		{ return new CToken(NUMERIC_LIT, yytext()); }
  \. {D}+ {E}?			{ return new CToken(NUMERIC_LIT, yytext()); }
  {D}+ {E}			{ return new CToken(NUMERIC_LIT, yytext()); }

  /* whitespace */
  {T}				{ incrementLine(); }
  {W}				{ /* ignore */ }

  /* identifiers */
  [A-Za-z_][A-Za-z0-9_]*	{ return new CToken(STANDARD_ID, yytext().intern()); }
}

<STRINGLITERAL> {
  \'    			{ yybegin(YYINITIAL); return new CToken(STRING_LIT, string.toString()); }
  \'\'				{ string.append('\''); }
  [^\r\n\']+			{ string.append(yytext()); }
  {T}				{
				  incrementLine();
				  string.append(yytext());
				}
}

<DELIMITERID> {
  \"    			{ yybegin(YYINITIAL); return new CToken(DELIMITER_ID, string.toString()); }

  [^\r\n\"]+			{ string.append(yytext()); }

  /* error cases */
  {T}				{ reportTrouble(CompilerMessages.BAD_END_OF_LINE, new Object[]{ "delimiter id" }); }
}

/* error fallback */
.|\n				{ reportTrouble(CompilerMessages.ILLEGAL_CHAR, new Object[]{ yytext() }); }
